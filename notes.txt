knn 4 
('accuracy: ', 0.93999999999999995)
Adaboost
('accuracy: ', 0.92400000000000004)
randomforest
('accuracy: ', 0.90400000000000003)


>>> for k in enron_data:
...  n+= 1 if enron_data[k]['poi'] == True else 0


>>> m = 0
>>> for k in enron_data:
...  m += 1 if not enron_data[k]['email_address'] == 'NaN' else 0
...
>>> m
111
>>> n = 0
>>> for k in enron_data:
...  n += 1 if not enron_data[k]['salary'] == 'NaN' else 0
...
>>> n
>>> total = len(enron_data.keys())

import pickle
data = pickle.load(open("final_project/final_project_dataset.pkl", "r"))

>>> p  = 0
>>> for k in data:
...  p += 1 if data[k]['poi'] == True else 0
...
>>> p
18
>>> 18 / 146.0
0.1232876712328767
>>> n  = 0
>>> for k in data:
...  n += 1 if  data[k]['total_payments'] == 'NaN' and data[k]['poi'] == True else 0
...
>>> n
0
### get key of outlier
import pickle
import sys
import matplotlib.pyplot
sys.path.append("../tools/")
from feature_format import featureFormat, targetFeatureSplit


### read in data dictionary, convert to numpy array
data_dict = pickle.load( open("../final_project/final_project_dataset.pkl", "r") )
features = ["salary", "bonus"]
data = featureFormat(data_dict, features)
# sort data
 sortedTuple = sorted(data, key=lambda tup: tup[0])
# find last  
lastTuple = sortedTuple[len(sortedTuple-1)]
salary = lastTuple[0]
bonus = lastTuple[1]

 for k, v in data_dict.iteritems():
 if type(v) is dict:
  for t, c in v.iteritems():
   if t == 'salary' and c == salary:
     print(t, c, k)


# notes for myself
# find the minimum and maximum exercised_stock_options from interpreter
>>> import pickle
>>> data_dict = pickle.load( open("../final_project/final_project_dataset.pkl", "r") )
>>> data_dict.pop("TOTAL", 0)
>>> data = []
>>> for k,v in data_dict.iteritems():
...  if v['exercised_stock_options'] != 'NaN':
...   tup = (k,float(v['exercised_stock_options']))
...   data.append(tup)
...
>>> sorted(data,key=lambda t: t[1], reverse=False)[0]
('BELFER ROBERT', 3285.0)
>>> sorted(data,key=lambda t: t[1], reverse=True)[0]
('LAY KENNETH L', 34348384.0)
>>>